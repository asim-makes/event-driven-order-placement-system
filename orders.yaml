AWSTemplateFormatVersion: "2010-09-09"
Description: Orders microservice - Lambda + DynamoDB + IAM + Log Group

Resources:
  # DynamoDB table
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: OrdersTable

      AttributeDefinitions:
        - AttributeName: orderID
          AttributeType: S

      KeySchema:
        - AttributeName: orderID
          KeyType: HASH

      BillingMode: PAY_PER_REQUEST

      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # IAM role for Lambda
  OrderLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: order-lambda-role-1

      Description: Allow orders lambda to assume a role to interact with orders table.

      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # DynamoDb Permission
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt OrdersTable.Arn
              # EventBridge Permission
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: !ImportValue EcomEventBusArn
          PolicyName: OrderTableAccess

  # CloudWatch log groups for lambda
  OrderServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/OrderLambda
      RetentionInDays: 14
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  # Lambda function
  OrderLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: OrderLambda
      Runtime: python3.12
      Description: Order lambda function that processes users orders and publishes message.
      Handler: index.handler
      Role: !GetAtt OrderLambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref OrdersTable
          EVENT_BUS_NAME: EcomEventBus
      Code:
        ZipFile: |
          import os, json, boto3, uuid

          ddb = boto3.client('dynamodb')
          eb = boto3.client('events')

          ORDER_STATUS = 'pending'

          def handler(event, context):
            try:
              if 'body' not in event or not event['body']:
                return {
                  'statusCode': 400,
                  'body': json.dumps({'message': 'Missing request body. Please send a JSON body with an "items" key, e.g., {"items": ["laptop", "mobile"]}'})
                }
              
              request_body = json.loads(event['body'])

              order_items = request_body.get('items', [])

              if not isinstance(order_items, list) or not order_items:
                return {
                'statusCode': 400,
                'body': json.dumps({'message': 'The "items" field must be a non-empty list of strings.'})
                }
              
              order_id = str(uuid.uuid4())

              ddb.put_item(
                TableName=os.environ['TABLE_NAME'],
                Item={
                  'orderId': {'S': order_id},
                  'status': {'S': ORDER_STATUS},
                  'items': {
                    'L': [{'S': item} for item in order_items]
                  }
                }
              )

              event_payload = {
                'orderId': order_id,
                'items': order_items,
                'status': ORDER_STATUS
              }

              eb.put_events(
                Entries=[
                  {
                    'Source': 'orders.service',
                    'DetailType': 'OrderPlaced',
                    'Detail': json.dumps(event_payload),
                    'EventBusName': os.environ['EVENT_BUS_NAME']
                  }
                ]  
              )

              return {
                'statusCode': 200,
                'body': json.dumps({'message': 'Order Placed', 'orderId': order_id, 'items': order_items})
              }
            
            except json.JSONDecodeError:
              return {
                'statusCode': 400,
                'body': json.dumps({'message': 'Invalid JSON format in request body.'})
              }
            
            except Exception as e:
              print(f"Error processing request: {e}")
              return {
                'statusCode': 500,
                'body': json.dumps({'message': f'Internal Server Error: {str(e)}'})
            }
      Timeout: 10

  # Orders API Gateway
  OrdersApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: OrdersApi
      Description: API Gateway that  the user interacts to and send request to Orders Lambda.

  OrdersApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt OrdersApi.RootResourceId
      PathPart: orders
      RestApiId: !Ref OrdersApi

  OrdersApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref OrdersApi
      ResourceId: !Ref OrdersApiResource
      HttpMethod: POST
      AuthorizationType: None
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub:
            - arn:${Partition}:apigateway:${Region}:lambda:path/2015-03-21/functions/${LambdaArn}/invocations
            - Partition: !Ref "AWS::Partition"
              Region: !Ref "AWS::Region"
              LambdaArn: !GetAtt OrderLambda.Arn

  # Permission for API gateway to invoke lambda
  OrdersLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref OrderLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: 
        Fn::Sub:
          - arn:${Partition}:execute-api:${Region}:${AccountID}:${RestApi}/*/POST/orders
          - Partition: !Ref "AWS::Partition"
            Region: !Ref "AWS::Region"
            AccountID: !Ref "AWS::AccountId"
            RestApi: !Ref OrdersApi
  
  # APIGateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: OrdersApiMethod
    Properties:
      RestApiId: !Ref OrdersApi
      StageName: prod

Outputs:
  OrdersApiEndpoint:
    Value: !Sub "https://${OrdersApi}.execute-api.${AWS::Region}.amazonaws.com/prod/orders"
    Description: API endpoint for placing orders