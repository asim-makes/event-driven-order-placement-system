AWSTemplateFormatVersion: "2010-09-09"
Description: Orders service - Lambda + DynamoDB + IAM + Log Group

Resources:
  # DynamoDB table
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: OrdersTable

      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S

      KeySchema:
        - AttributeName: orderId
          KeyType: HASH

      BillingMode: PAY_PER_REQUEST

      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # IAM role for Lambda
  OrderLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: order-lambda-role-1

      Description: Allow order lambda to assume a role to interact with orders table.

      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # DynamoDb Permission
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt OrdersTable.Arn
              # EventBridge Permission
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: !ImportValue EcomEventBusArn
          PolicyName: OrderTableAccess

  # CloudWatch log groups for lambda
  OrderServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/OrderLambda
      RetentionInDays: 14
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  # Lambda function
  OrderLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: OrderLambda
      Runtime: python3.11
      Description: Order lambda function that processes users orders and publishes message.
      Handler: index.handler
      Role: !GetAtt OrderLambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref OrdersTable
          EVENT_BUS_NAME: EcomEventBus
      Code:
        ZipFile: |
          import os, json, boto3, uuid, logging
          from decimal import Decimal

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          eb = boto3.client('events')
          ddb_resource = boto3.resource('dynamodb')

          ORDER_STATUS = ['pending', 'cancelled', 'payment_failed']

          def format_response(status_code, body):
            return {
              'statusCode': status_code,
              'body': json.dumps(body)
            }

          def handler(event, context):
            if "httpMethod" in event:
              try:
                if 'body' not in event or not event['body']:
                  return format_response(400, {'message': 'Missing request body. Please send a JSON body with "items" and "amount".'})
                
                request_body = json.loads(event['body'])
                order_items = request_body.get('items', [])
                order_amount_raw = request_body.get('amount')

                if not isinstance(order_items, list) or not order_items:
                  return format_response(400, {'message': 'The "items" field must be a non-empty list of strings.'})
                
                try:
                  order_amount = Decimal(str(order_amount_raw)) 
                except Exception:
                  return format_response(400, {'message': 'The "amount" field must be a valid number.'})
                
                order_id = str(uuid.uuid4())
                table = ddb_resource.Table(os.environ['TABLE_NAME'])

                table.put_item(
                  Item={
                    'orderId': order_id, 
                    'status': ORDER_STATUS[0],
                    'amount': order_amount,
                    'items': order_items
                  }
                )

                logger.info(f"Order {order_id} with amount: {order_amount} successfully placed in table.")

                event_payload = {
                  'orderId': order_id,
                  'orderItems': order_items,
                  'amount': float(order_amount),
                  'status': ORDER_STATUS[0]
                }

                eb.put_events(
                  Entries=[
                    {
                      'Source': 'orders.service',
                      'DetailType': 'OrderPlaced',
                      'Detail': json.dumps(event_payload),
                      'EventBusName': os.environ['EVENT_BUS_NAME']
                    }
                  ]  
                )

                logger.info(f"OrderPlaced event published for order {order_id}.")

                return format_response(200, {'message': 'Order Placed', 'orderId': order_id, 'items': order_items, 'amount': float(order_amount)})

              except json.JSONDecodeError:
                return format_response(400, {'message': 'Invalid JSON format in request body.'})
              
              except Exception as e:
                logger.error(f"Error processing HTTP request: {e}", exc_info=True)
                return format_response(500, {'message': f'Internal Server Error: {str(e)}'})
            
            elif "detail-type" in event:
              table = ddb_resource.Table(os.environ['TABLE_NAME'])
              detail = event.get("detail", {})
              order_id = detail.get("orderId")

              if not order_id:
                logger.warning("Received EventBridge event without an orderId. Skipping.")
                return {"statusCode": 200}
              
              update_data = None

              if event["detail-type"] == "StockConfirmation":
                if not detail.get("stockConfirmed", True):
                  update_data = {
                    "status": ORDER_STATUS[1],
                    "reason": "out_of_stock"
                  }
                  logger.info(f"Order {order_id} status updated to cancelled (out of stock).")

              elif event["detail-type"] == "PaymentConfirmation":
                if not detail.get("paymentConfirmed", True):
                  update_data = {
                    "status": ORDER_STATUS[2],
                    "reason": "insufficient_funds"
                  }
                  logger.info(f"Order {order_id} status updated to payment_failed.")
              
              elif event["detail-type"] == "ShipmentCreated":
                shipping_status = detail.get("shippingStatus", "on_delivery")
                tracking_number = detail.get("trackingNumber")
                
                update_data = {
                  "status": shipping_status, 
                  "trackingNumber": tracking_number
                }

                logger.info(f"Order {order_id} status updated to {shipping_status} by shipping service.")

              elif event["detail-type"] == "ShipmentCreatedByDLQ":
                shipping_status = detail.get("shippingStatus", "on_delivery")
                tracking_number = detail.get("trackingNumber")
                processed_by = detail.get("processedBy")
                additional_info = detail.get("additionalInfo")
                
                update_data = {
                  "status": shipping_status, 
                  "trackingNumber": tracking_number,
                  "processedBy": processed_by,
                  "additionalInfo": additional_info
                }

                logger.info(f"Order {order_id} status updated to {shipping_status} by shipping service DLQ.")
              
              if update_data:
                update_expression_parts = []
                expression_attribute_names = {}
                expression_attribute_values = {}
                
                for key, value in update_data.items():
                  alias = f"#{key}"
                  value_alias = f":{key}"
                  update_expression_parts.append(f"{alias} = {value_alias}")
                  expression_attribute_names[alias] = key
                  expression_attribute_values[value_alias] = value
                
                table.update_item(
                  Key={"orderId": order_id},
                  UpdateExpression="SET " + ", ".join(update_expression_parts),
                  ExpressionAttributeNames=expression_attribute_names,
                  ExpressionAttributeValues=expression_attribute_values
                )

              return {"statusCode": 200}
            
            return {"statusCode": 400, "body": "Unknown event source"}
      Timeout: 10

  # Orders API Gateway
  OrdersApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: OrdersApi
      Description: API Gateway that  the user interacts to and send request to Orders Lambda.

  OrdersApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt OrdersApi.RootResourceId
      PathPart: orders
      RestApiId: !Ref OrdersApi

  OrdersApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref OrdersApi
      ResourceId: !Ref OrdersApiResource
      HttpMethod: POST
      AuthorizationType: None

      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'

      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub:
            - arn:${Partition}:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
            - Partition: !Ref "AWS::Partition"
              Region: !Ref "AWS::Region"
              LambdaArn: !GetAtt OrderLambda.Arn

  # APIGateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - OrdersApiMethod
    Properties:
      RestApiId: !Ref OrdersApi

  # Separate Stage Resource
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref OrdersApi
      DeploymentId: !Ref ApiGatewayDeployment
      StageName: prod
  
  # Permission for API gateway to invoke lambda
  OrdersLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ApiGatewayStage
    Properties:
      FunctionName: !Ref OrderLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: 
        Fn::Sub:
          - arn:${Partition}:execute-api:${Region}:${AccountID}:${RestApi}/*/POST/orders
          - Partition: !Ref "AWS::Partition"
            Region: !Ref "AWS::Region"
            AccountID: !Ref "AWS::AccountId"
            RestApi: !Ref OrdersApi
  
  # EventBridge Rule: Capture StockConfirmation=False
  StockConfirmationFalseRule:
    Type: AWS::Events::Rule
    Properties:
      Name: StockConfirmationFalseRule
      EventBusName: !ImportValue EcomEventBusArn
      Description: An event bridge rule to route stock status (False) message to Order lambda.
      EventPattern:
        source:
          - inventory.service
        detail-type:
          - "StockConfirmation"
        detail:
          stockConfirmed:
            - false
      Targets:
        - Id: OrdersLambdaTargetForInventory
          Arn: !GetAtt OrderLambda.Arn
    
  # EventBridge Rule: Capture PaymentConfirmation=False
  PaymentFailureRule:
    Type: AWS::Events::Rule
    Properties:
      Name: PaymentFailureRule
      EventBusName: !ImportValue EcomEventBusArn
      Description: An event bridge rule to route payment status message to Order lambda
      EventPattern:
        source:
          - payment.service
        detail-type:
          - "PaymentConfirmation"
        detail:
          paymentConfirmed:
            - false
      Targets:
        - Id: OrdersLambdaTargetForPayment
          Arn: !GetAtt OrderLambda.Arn

  # EventBridge Rule: Capture ShipmentCreated
  ShipmentCreatedRule:
    Type: AWS::Events::Rule
    Properties:
      Name: ShipmentCreatedRule
      EventBusName: !ImportValue EcomEventBusArn
      Description: An event bridge rule to route shipment status message to Order lambda
      EventPattern:
        source:
          - shipping.service
        detail-type:
          - "ShipmentCreated"
      Targets:
        - Id: ShipmentLambdaTarget
          Arn: !GetAtt OrderLambda.Arn

  # EventBridge Rule: Capture ShipmentCreated by DLQ
  ShipmentCreatedRuleDLQ:
    Type: AWS::Events::Rule
    Properties:
      Name: ShipmentCreatedRuleDLQ
      EventBusName: !ImportValue EcomEventBusArn
      Description: An event bridge rule to route shipment status message sent by DLQ to Order lambda
      EventPattern:
        source:
          - shipping.service
        detail-type:
          - "ShipmentCreatedByDLQ"
      Targets:
        - Id: ShipmentLambdaTargetDLQ
          Arn: !GetAtt OrderLambda.Arn
  
  # Permissions to invoke lambda by event bridge
  LambdaInvokePermissionEventBridgeForInventory:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref OrderLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StockConfirmationFalseRule.Arn

  LambdaInvokePermissionEventBridgeForPayment:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref OrderLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt PaymentFailureRule.Arn

  LambdaInvokePermissionEventBridgeForShipment:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref OrderLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ShipmentCreatedRule.Arn

  LambdaInvokePermissionEventBridgeForShipmentDLQ:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref OrderLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ShipmentCreatedRuleDLQ.Arn

Outputs:
  OrdersApiEndpoint:
    Value: !Sub "https://${OrdersApi}.execute-api.${AWS::Region}.amazonaws.com/prod/orders"
    Description: API endpoint for placing orders