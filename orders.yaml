AWSTemplateFormatVersion: "2010-09-09"
Description: Orders microservice - Lambda + DynamoDB + IAM + Log Group

Resources:
  # DynamoDB table
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: OrdersTable

      AttributeDefinitions:
        - AttributeName: orderID
          AttributeType: S

      KeySchema:
        - AttributeName: orderID
          KeyType: HASH

      BillingMode: PAY_PER_REQUEST

      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # IAM role for Lambda
  OrderLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: order-lambda-role

      Description: Allow orders lambda to assume a role to interact with orders table.

      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt OrdersTable.Arn
          PolicyName: OrderTableAccess

  # CloudWatch log groups for lambda
  OrderServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/OrderLambda
      RetentionInDays: 14

  # Lambda function
  OrderLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: OrderLambda
      Runtime: python3.12
      Description: Order lambda function that processes users orders and publishes message.
      Handler: index.handler
      Role: !GetAtt OrderLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3

          def handler(event, context):
            return {
              'statusCode': 200,
              'body': json.dumps('OrderLambda Working!')
            }
      Timeout: 10

Outputs:
  OrdersTableName:
    Description: Orders DynamoDB table name
    Value: !Ref OrdersTable
  OrderLambdaName:
    Description: Order Lambda function name
    Value: !Ref OrderLambda